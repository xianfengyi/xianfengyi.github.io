[{"commentTimes":0,"description":"因为在windows上跑matlab实验，出现内存不足的情况，因此，希望能在服务器上安装一个matlab。然后出现各种问题，花了一天时间才装好，特此记录下。因为对于没装过的童靴来说，每一个步骤都很关键，因此，尽量把每个步骤写的细一点。Matlab镜像文件matlab 安装镜像文件我是从这儿下载的，再次对上传者表示感谢，地址：镜像文件，提取码为：4gj3。原博客在参考资料【3】安装步骤1、上传镜像文件...        ","id":"70215817","picUrl":"http://img.blog.csdn.net/20170417194933323","postdate":"2017-04-17 20:42","tagList":["matlab安装"],"title":"服务器远程安装Matlab2015","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":96},{"commentTimes":2,"description":"在数据分析和数据挖掘以及搜索引擎中，我们经常需要知道个体间差异的大小，进而评价个体的相似性和类别。常见的比如数据分析中比如相关分析，数据挖掘中的分类聚类（K-Means等）算法，搜索引擎进行物品推荐时。相似度就是比较两个事物的相似性。一般通过计算事物的特征之间的距离，如果距离小，那么相似度大；如果距离大，那么相似度小。比如两种水果，将从颜色，大小，维生素含量等特征进行比较相似性。问题定义：...        ","id":"61917158","picUrl":"http://img.blog.csdn.net/20170411163336409","postdate":"2017-04-11 20:06","tagList":["相似度计算"],"title":"常用的相似度计算方法原理及实现","typeList":[],"viewTimes":282},{"commentTimes":0,"description":"一、C可变参数函数一般我们编程的时候，函数中形式参数的数目通常是确定的，在调用时要依次给出与形式参数对应的实际参数。但在某些情况下我们希望函数的参数个数可以根据需要确定，因此c语言引入可变参数函数。典型的可变参数函数的例子有printf()、scanf()等.先看代码：printf(“hello,world!”);其参数个数为1个。printf(“a=%d,b=%ｓ,c=%c”,a,b,c);其参...        ","id":"61208974","picUrl":"","postdate":"2017-03-10 21:29","tagList":["c++可变参数函数"],"title":"C/C++可变参数函数","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":157},{"commentTimes":0,"description":"一、操纵套接字选项的方法1、getsockopt和setsockopt函数这两个函数仅用于套接字#include    int getsockopt(int sock, int level, int optname, void *optval, socklen_t *optlen);  int setsockopt(int sock, int level, int o...        ","id":"61201951","picUrl":"","postdate":"2017-03-10 17:45","tagList":["套接字选项"],"title":"套接字选项","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":129},{"commentTimes":0,"description":"我们都知道TCP 是面向连接的，因此再传输数据之前必须要建立连接，也就是客户端调用connect()，服务端accept(),完成三次握手，建立连接。 我们也知道UDP是面向无连接的，它传输数据之前是不需要建立连接的，那么对于UDP通信编程，我们是否需要调用connect了？如果可以，什么时候调用了？调用了有什么好处了？一、发送接收函数首先回顾下，传输数据的两组函数1、tcp...        ","id":"61196503","picUrl":"","postdate":"2017-03-10 16:17","tagList":["UDPConnect"],"title":"UDP-Connect","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":104},{"commentTimes":0,"description":"所谓的“流量控制”，就是让发送方的发送速率不要太快，要让接受方来的及接收。这是一种对于端的控制，不像拥塞控制，是对网络状况的控制。那么，TCP是怎么实现流量控制的了？这个可以从成块数据(大分组）、交互数据流（小分组）两种数据流情况来详细讨论。一、成块数据对于成块数据，一般采用滑动窗口实现流量控制。滑动窗口滑动窗口，也就是接收方来控制发送方，接收方告诉发送方，自己最多可以接受多少数据，然后发送方根据这...        ","id":"61195844","picUrl":"http://img.blog.csdn.net/20170310130612961?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWl4aWFuZmVuZzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast","postdate":"2017-03-10 13:14","tagList":["tcp流量控制"],"title":"TCP-流量控制","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":180},{"commentTimes":0,"description":"守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。守护进程是一种很有用的进 程。Linux的大多数服务器就是用守护进程实现的。比如，Internet服务器inetd，Web服务器httpd等。同时，守护进程完成许多系统任 务。比如，作业规划进程crond，打印进程lpd等。在了解守护进程前，先看看进程组、会话、控制终端以及作业的概念...        ","id":"59123231","picUrl":"","postdate":"2017-03-01 20:08","tagList":["守护进程概念及实例"],"title":"守护进程概念及实例","typeList":[],"viewTimes":70},{"commentTimes":0,"description":"“进程是程序在处理机上的一个执行过程，是资源分配的基本单位”；“线程是CPU调度的一个基本单位”。概念，我们都烂熟于心了，那么是否可以究其本质的分析下，多进程和多线程的优缺点，以便在实际场景中进行合适的选择了？一、多进程1、概念在同一个时间里，同一个计算机系统中如果允许两个或两个以上的进程处于运行状态，这便是多任务。现代的操作系统几乎都是多任务操作系统，能够同时管理多个进程的运行。2、优点1）编程相...        ","id":"59057446","picUrl":"","postdate":"2017-03-01 19:02","tagList":["多进程和多线程"],"title":"多进程和多线程","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":217},{"commentTimes":0,"description":"一、用随机函数构造另一个随机函数比如，有这样一个需求，现在有一个rand5（）函数，这个函数可以生成1-5的随机数，让你通过这个函数生成1-7范围的随机数。怎么做了？  一般思路是这样的：用两次rang5函数，通过这两次rand5结果，构造出一个随机数范围包括0-7，但比0-7大的范围就好了。比如（rand5 -1）*5 +rand5，它的范围为1-25（包括0-7），因为rand5产生每个数随机概...        ","id":"58591566","picUrl":"","postdate":"2017-02-28 12:55","tagList":["生成随机函数","洗牌算法"],"title":"随机数问题","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":197},{"commentTimes":0,"description":"原文地址：linux sed命令详解一、简介sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作...        ","id":"56671130","picUrl":"","postdate":"2017-02-23 14:20","tagList":["linux命令sed"],"title":"Linux命令-sed","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":120},{"commentTimes":0,"description":"内存管理最基本的操作就是由处理器把程序装入内存中运行。技术有固定分区、动态分区、简单分页、简单分段、虚拟内存分页、虚拟内存分段等。在现代操作系统中基本都有虚拟内存技术。下面了解下各个方法的思想。1、固定分区管理用户内存空间的最简单的方法是就是把它分成许多固定边界的区域。对于分区大小，我们可以采用大小相等分区，或者大小不相等分区。1）大小相等的分区。 在这种情况下，小于或者等于分区大小的任何进程都可...        ","id":"56670575","picUrl":"","postdate":"2017-02-23 13:58","tagList":["内存管理"],"title":"操作系统-内存管理笔记（一）","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":123},{"commentTimes":0,"description":"一、原因：1、代码更少，更简洁； 2、 对序列容器，还可以避免单个单个申请造成多次分配内存（拷贝开销大）二、区间操作：1）区间构造：container::container(InputIterator begin,InputIterator end);2）区间插入：对于序列容器：void Container::insert(Iterator positon,//插入位置...        ","id":"56666640","picUrl":"","postdate":"2017-02-23 10:37","tagList":["Stl尽量使用区间操"],"title":"Effective STL-尽量使用区间操作代替单元素操作","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":241},{"commentTimes":0,"description":"一、去除一个容器中有特定值得所有对象1、如果容器是vector、string或deque，使用erase-remove惯用法c.erase(remove(c.begin,c.end(),value),c.end());//c为容器，value为待删值2、对于listc.remove(value);3、对于关联容器 关联容器无remove成员函数，它是调用erase函数。c.erase(value)...        ","id":"56666442","picUrl":"","postdate":"2017-02-23 10:27","tagList":["stl容器删除元素"],"title":"Effective STL-各种容器正确删除元素方法","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":227},{"commentTimes":0,"description":"我很喜欢新的C++11的智能指针。在很多时候，对很多讨厌自己管理内存的人来说是天赐的礼物。在我看来，C++11的智能指针能使得C++新手教学更简单。其实，我已经使用C++11两年多了，我无意中发现多种错误使用C++11智能指针的案例，这些错误会使程序效率很低或者直接崩溃。为了方便查找，我把它们按照下文进行了归类。在开始之前，我们用一个简单的Aircraft类来展示一下这些错误。cl...        ","id":"56298957","picUrl":"","postdate":"2017-02-22 23:27","tagList":["c++智能指针错误规"],"title":"使用 C++11 智能指针时要避开的 10 大错误","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":199},{"commentTimes":0,"description":"在Shell中，有几个符号有着特别的含义，分别是#符号、分号、引号、斜线与反斜线、反引号、冒号、问号、美元符号，下面详细看看这几个特殊字符的作用。...        ","id":"56313899","picUrl":"","postdate":"2017-02-21 22:00","tagList":["Shell特殊字符"],"title":"shell-特殊符号","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":214},{"commentTimes":0,"description":"linux中查看文件的命令有cat，more，less，head，tail等，本文主要看看他们的用法与区别。...        ","id":"56299014","picUrl":"","postdate":"2017-02-21 21:04","tagList":["linux-cat","linux-more","linux-less","less与more"],"title":"Linux命令-查看文件","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":296},{"commentTimes":0,"description":"TCP定时器对于每个链接，TCP拥有四个定时器，分别是：重传定时器、坚持定时器、保活定时器、2MSL定时器。...        ","id":"55804969","picUrl":"","postdate":"2017-02-19 15:30","tagList":["TCP定时器"],"title":"TCP-定时器","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":107},{"commentTimes":0,"description":"一、建立连接建立连接的过程，如图所示：   1、“三次握手”过程：1）第一次握手：建立连接时，客户端A发送SYN包（SYN=1,seq=x）到服务器B，并进去SYN-SEND状态，等待服务器B确认； 2）服务器B收到A发送的SYN包，对其进行确认，向A发送SYN+ACK包（SYN=1，ACK=1,seq=y,ack=x+1）,此时服务器B进入SYN-RECVD状态； 3）客户端A收到服务器...        ","id":"55804951","picUrl":"http://img.blog.csdn.net/20170219152247510?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWl4aWFuZmVuZzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast","postdate":"2017-02-19 15:28","tagList":["TCP三次握手四次挥","TCP数据传输控制"],"title":"TCP-核心重点知识","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":156},{"commentTimes":0,"description":"网络层次模型，以及TCP头部格式...        ","id":"55804840","picUrl":"http://img.blog.csdn.net/20170219150937550?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWl4aWFuZmVuZzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast","postdate":"2017-02-19 15:19","tagList":["tcp报文头部解析"],"title":"TCP-基础知识","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":137},{"commentTimes":0,"description":"二叉树，对一些常见的简单算法题，比如翻转二叉树，求高度，判断是否是相等的二叉树等，我们是必须掌握的！！！...        ","id":"55702141","picUrl":"","postdate":"2017-02-19 01:02","tagList":["二叉树简单算法题"],"title":"二叉树-常见简单算法题","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":104},{"commentTimes":0,"description":"1、概念回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。许多复杂的，规模较大的问题都可以使用回溯法，有“通用...        ","id":"55684782","picUrl":"","postdate":"2017-02-18 23:46","tagList":["回朔算法","回朔算法通用框架"],"title":"常用算法-回朔法","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":142},{"commentTimes":0,"description":"UDP简介UDP—用户数据报协议，是一个简单的面向数据报的运输层协议。UDP不提供可靠性，它只是把应用程序传给IP层的数据报发送出去，但是并不能保证它们能到达目的地。由于UDP在传输数据报前不用在客户和服务器之间建立一个连接，且没有超时重发等机制，故而传输速度很快....        ","id":"55506854","picUrl":"http://img.blog.csdn.net/20170217122418098?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWl4aWFuZmVuZzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast","postdate":"2017-02-17 12:41","tagList":["UDP-通信","UDP-Socket"],"title":"Linux UDP Socket编程（一）","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":159},{"commentTimes":0,"description":"转自：socket网络编程中的头文件Socket编程中需要用到的头文件stdlib.h   ： //某些结构体定义和宏定义，如EXIT_FAILURE、EXIT_SUCCESS等sys/types.h：包含很多类型重定义，如pid_t、int8_t等sys/socket.h：与套接字相关的函数声明和结构体定义，如socket()、bind()、connect()及struct sockaddr的定义...        ","id":"55506750","picUrl":"","postdate":"2017-02-17 12:20","tagList":["Socket编程头文"],"title":"linux编程常用头文件","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":197},{"commentTimes":0,"description":"今天在实验楼发现一个特别好玩的，python 微信库itchat,可以实现自动回复等多种功能，好玩到根本停不下来啊，尤其是调戏调戏不懂计算机的，特别有成就感，哈哈！！...        ","id":"55273704","picUrl":"","postdate":"2017-02-16 22:00","tagList":["实现微信自动回复","itchat"],"title":"python itchat实现微信自动回复","typeList":[{"count":2,"id":"6505361","name":"python"}],"viewTimes":1772},{"commentTimes":0,"description":"位运算是把数字用二进制表示之后，对每一位上的0或者1的运算。运算包括与、或、异或，非。熟练掌握位运算技巧，能给我们解决问题提供一些巧妙的方法。...        ","id":"55262171","picUrl":"","postdate":"2017-02-16 17:47","tagList":["位运算技巧","位运算应用"],"title":"位运算技巧与应用","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":58},{"commentTimes":0,"description":"二分查找，应用广泛，将n个元素分成个数大致相同的两半，取a[n/2]与欲查找的x作比较，如果x=a[n/2]则找到x，算法终止。如果xa[n/2]，则我们只要在数组a的右半部继续搜索x。...        ","id":"52684432","picUrl":"http://img.blog.csdn.net/20170216143023071?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWl4aWFuZmVuZzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast","postdate":"2017-02-16 15:16","tagList":[],"title":"二分查找实现及其应用","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":160},{"commentTimes":0,"description":"对于二叉树的遍历，最熟悉的就是递归遍历了，对二叉树的非递归遍历大致知道一些，但是不太熟悉，尤其是后续非递归遍历的实现，一直比较懵逼，于是上网查询了一下，果然大神无处不在，那个后序遍历的双栈法，简直让人拍案叫绝，下面总结下。...        ","id":"55228458","picUrl":"http://img.blog.csdn.net/20170215235852029?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWl4aWFuZmVuZzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast","postdate":"2017-02-16 00:25","tagList":["二叉树非递归遍历","二叉树深度优先遍历","二叉树广度优先遍历"],"title":"二叉树-遍历终极版","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":339},{"commentTimes":0,"description":"对于二叉树的创建女，一般我们只熟悉最简单的二叉树创建方式，即逐个输入节点，然后按照先序遍历或者中序、后序遍历方式来递归建立二叉树。但是，光掌握这个是不够的，我们还得掌握二叉树的重建（先序中序重建二叉树，后序中序重建二叉树），数组转换为二叉树，链表转换为二叉树等等。1、最简单的创建方式我们可以根据先序遍历递归创建二叉树，当然也可以中序或者后序遍历方式创建二叉树。//创建二叉树BTress Creat...        ","id":"55225750","picUrl":"","postdate":"2017-02-15 23:25","tagList":["二叉树创建-重建","有序数组转换为二叉树","有序链表转化为二叉树"],"title":"二叉树-创建、重建、转化","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":422},{"commentTimes":0,"description":"前面通过多进程，多线程，支持处理多个客户端通信，本篇将讲述用select这个IO复用来实现。IO模型首先连接一下IO模型，unix下有5种可用IO模型，分别是：阻塞式IO、非阻塞式IO、IO复用、信号驱动式IO。  5种IO模型比较 1、阻塞式IO阻塞式IO是最常用的IO模式，它就是没有数据就阻塞，一直等到有数据位置，期间啥也不干，就一门心思等数据。2、非阻塞式IO非阻塞式IO，就是不断轮询，...        ","id":"55194329","picUrl":"http://img.blog.csdn.net/20170215130413400?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWl4aWFuZmVuZzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast","postdate":"2017-02-15 13:22","tagList":["服务器select版"],"title":"Linux TCP Socket编程（二）","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":128},{"commentTimes":0,"description":"通过特征提取，我们能得到未经处理的特征，这时的特征可能有以下问题：1）不属于同一量纲：即特征的规格不一样，不能够放在一起比较。无量纲化可以解决这一问题。 2）信息冗余：对于某些定量特征，其包含的有效信息为区间划分，例如学习成绩，假若只关心“及格”或不“及格”，那么需要将定量的考分，转换成“1”和“0”表示及格和未及格。二值化可以解决这一问题。 3）定性特征不能直接使用：某些机器学习算法和模...        ","id":"54575036","picUrl":"http://img.blog.csdn.net/20170116155719083?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWl4aWFuZmVuZzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast","postdate":"2017-02-15 00:16","tagList":["特征工程"],"title":"特征工程-数据预处理","typeList":[],"viewTimes":122},{"commentTimes":0,"description":"当数据预处理完成后，我们需要选择有意义的特征输入机器学习的算法和模型进行训练。通常来说，从两个方面考虑来选择特征：特征是否发散：如果一个特征不发散，例如方差接近于0，也就是说样本在这个特征上基本上没有差异，这个特征对于样本的区分并没有什么用。  特征与目标的相关性：这点比较显见，与目标相关性高的特征，应当优选选择。除方差法外，本文介绍的其他方法均从相关性考虑。根据特征选择的形式又可以...        ","id":"54575393","picUrl":"http://img.blog.csdn.net/20170116161715874?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWl4aWFuZmVuZzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast","postdate":"2017-02-15 00:16","tagList":["特征工程"],"title":"特征工程-特征选择","typeList":[],"viewTimes":69},{"commentTimes":0,"description":"当特征选择完成后，可以直接训练模型了，但是可能由于特征矩阵过大，导致计算量大，训练时间长的问题，因此降低特征矩阵维度也是必不可少的。常见的降维方法除了以上提到的基于L1惩罚项的模型以外，另外还有主成分分析法（PCA）和线性判别分析（LDA），线性判别分析本身也是一个分类模型。PCA和LDA有很多的相似点，其本质是要将原始的样本映射到维度更低的样本空间中，但是PCA和LDA的映射目标不一样：PCA是...        ","id":"54575425","picUrl":"","postdate":"2017-02-15 00:15","tagList":[],"title":"特征工程-降维","typeList":[{"count":6,"id":"6456349","name":"数据挖掘"}],"viewTimes":64},{"commentTimes":0,"description":"有这么一句话在业界广泛流传：数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。那特征工程到底是什么呢？顾名思义，其本质是一项工程活动，目的是最大限度地从原始数据中提取特征以供算法和模型使用。...        ","id":"54574811","picUrl":"http://img.blog.csdn.net/20170116155244702?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWl4aWFuZmVuZzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast","postdate":"2017-02-15 00:15","tagList":["特征工程"],"title":"特征工程-总览","typeList":[{"count":6,"id":"6456349","name":"数据挖掘"}],"viewTimes":63},{"commentTimes":0,"description":"linux tcp socket 通信学习...        ","id":"55102751","picUrl":"http://img.blog.csdn.net/20170214174209262?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWl4aWFuZmVuZzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast","postdate":"2017-02-14 17:43","tagList":["socket-通信"],"title":"linux TCP Socket编程（一）","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":77},{"commentTimes":0,"description":"本系列将对string函数的用法以及实现做一个总结，共包括以下部分：篇一： string函数strcspn 篇二： string函数strcpy 篇三： string函数strcat 篇四： string函数strchr 篇五： string函数strncmp 篇六： string函数strcmp 篇七： string函数strstr 篇八： string函数strlen...        ","id":"54668493","picUrl":"","postdate":"2017-01-22 14:55","tagList":[],"title":"string函数-strcspn","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":48},{"commentTimes":0,"description":"本系列将对string函数的用法以及实现做一个总结，共包括以下部分：篇一： string函数strcspn 篇二： string函数strcpy 篇三： string函数strcat 篇四： string函数strchr 篇五： string函数strncmp 篇六： string函数strcmp 篇七： string函数strstr 篇八： string函数strlen...        ","id":"54668517","picUrl":"","postdate":"2017-01-22 14:54","tagList":[],"title":"string函数-strcat","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":80},{"commentTimes":0,"description":"本系列将对string函数的用法以及实现做一个总结，共包括以下部分：篇一： string函数strcspn 篇二： string函数strcpy 篇三： string函数strcat 篇四： string函数strchr 篇五： string函数strncmp 篇六： string函数strcmp 篇七： string函数strstr 篇八： string函数strlen...        ","id":"54668524","picUrl":"","postdate":"2017-01-22 14:54","tagList":[],"title":"string函数-strchr","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":46},{"commentTimes":0,"description":"本系列将对string函数的用法以及实现做一个总结，共包括以下部分：篇一： string函数strcspn 篇二： string函数strcpy 篇三： string函数strcat 篇四： string函数strchr 篇五： string函数strncmp 篇六： string函数strcmp 篇七： string函数strstr 篇八： string函数strlen...        ","id":"54668531","picUrl":"","postdate":"2017-01-22 14:54","tagList":[],"title":"string函数-strncmp","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":52},{"commentTimes":0,"description":"本系列将对string函数的用法以及实现做一个总结，共包括以下部分：篇一： string函数strcspn 篇二： string函数strcpy 篇三： string函数strcat 篇四： string函数strchr 篇五： string函数strncmp 篇六： string函数strcmp 篇七： string函数strstr 篇八： string函数strlen...        ","id":"54668539","picUrl":"","postdate":"2017-01-22 14:53","tagList":[],"title":"string函数-strcmp","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":86},{"commentTimes":0,"description":"本系列将对string函数的用法以及实现做一个总结，共包括以下部分：篇一： string函数strcspn 篇二： string函数strcpy 篇三： string函数strcat 篇四： string函数strchr 篇五： string函数strncmp 篇六： string函数strcmp 篇七： string函数strstr 篇八： string函数strlen...        ","id":"54668543","picUrl":"","postdate":"2017-01-22 14:53","tagList":[],"title":"string函数-strstr","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":86},{"commentTimes":0,"description":"本系列将对string函数的用法以及实现做一个总结，共包括以下部分：篇一： string函数strcspn 篇二： string函数strcpy 篇三： string函数strcat 篇四： string函数strchr 篇五： string函数strncmp 篇六： string函数strcmp 篇七： string函数strstr 篇八： string函数strlen...        ","id":"54668546","picUrl":"","postdate":"2017-01-22 14:53","tagList":[],"title":"string函数-strlen","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":59},{"commentTimes":0,"description":"本系列将对string函数的用法以及实现做一个总结，共包括以下部分：篇一： string函数strcspn 篇二： string函数strcpy 篇三： string函数strcat 篇四： string函数strchr 篇五： string函数strncmp 篇六： string函数strcmp 篇七： string函数strstr 篇八： string函数strlen...        ","id":"54668508","picUrl":"","postdate":"2017-01-22 14:52","tagList":[],"title":"string函数-strcpy","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":67},{"commentTimes":0,"description":"本系列将对一些常见c++关键字做一个总结，共包括一下部分： 篇一：c++关键字-const 篇二：c++关键字-extern 篇三：c++关键字-operator 篇四：c++关键字-sizeof 篇五：c++关键字-static 篇六：c++关键字-new 篇七：c++关键字-volatile 篇八：c++关键字-union一、定义常量const修饰变量，以下两种定义...        ","id":"54668264","picUrl":"","postdate":"2017-01-22 14:31","tagList":["const"],"title":"c++关键字-const","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":117},{"commentTimes":0,"description":"本系列将对一些常见c++关键字做一个总结，共包括一下部分： 篇一：c++关键字-const 篇二：c++关键字-extern 篇三：c++关键字-operator 篇四：c++关键字-sizeof 篇五：c++关键字-static 篇六：c++关键字-new 篇七：c++关键字-volatile 篇八：c++关键字-union1、基本解释extern可以置于变量或者...        ","id":"54668285","picUrl":"","postdate":"2017-01-22 14:31","tagList":["extern"],"title":"c++关键字-extern","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":57},{"commentTimes":0,"description":"本系列将对一些常见c++关键字做一个总结，共包括一下部分： 篇一：c++关键字-const 篇二：c++关键字-extern 篇三：c++关键字-operator 篇四：c++关键字-sizeof 篇五：c++关键字-static 篇六：c++关键字-new 篇七：c++关键字-volatile 篇八：c++关键字-union一、概念重载的运算符是具有特殊名字的函数...        ","id":"54668296","picUrl":"","postdate":"2017-01-22 14:30","tagList":["运算符重载"],"title":"c++关键字-operator","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":69},{"commentTimes":0,"description":"本系列将对一些常见c++关键字做一个总结，共包括一下部分： 篇一：c++关键字-const 篇二：c++关键字-extern 篇三：c++关键字-operator 篇四：c++关键字-sizeof 篇五：c++关键字-static 篇六：c++关键字-new 篇七：c++关键字-volatile 篇八：c++关键字-union1. 定义sizeof是一个操作符（op...        ","id":"54668302","picUrl":"","postdate":"2017-01-22 14:30","tagList":["sizeof"],"title":"c++关键字-sizeof","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":92},{"commentTimes":0,"description":"本系列将对一些常见c++关键字做一个总结，共包括一下部分： 篇一：c++关键字-const 篇二：c++关键字-extern 篇三：c++关键字-operator 篇四：c++关键字-sizeof 篇五：c++关键字-static 篇六：c++关键字-new 篇七：c++关键字-volatile 篇八：c++关键字-unionstatic的作用可以归结为三条：1、隐...        ","id":"54668306","picUrl":"","postdate":"2017-01-22 14:29","tagList":["static"],"title":"c++关键字-static","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":42},{"commentTimes":0,"description":"本系列将对一些常见c++关键字做一个总结，共包括一下部分： 篇一：c++关键字-const 篇二：c++关键字-extern 篇三：c++关键字-operator 篇四：c++关键字-sizeof 篇五：c++关键字-static 篇六：c++关键字-new 篇七：c++关键字-volatile 篇八：c++关键字-union一般我们常用的申请内存的方法有new与mallo...        ","id":"54668310","picUrl":"","postdate":"2017-01-22 14:29","tagList":["new"],"title":"c++关键字-new","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":40},{"commentTimes":0,"description":"本系列将对一些常见c++关键字做一个总结，共包括一下部分： 篇一：c++关键字-const 篇二：c++关键字-extern 篇三：c++关键字-operator 篇四：c++关键字-sizeof 篇五：c++关键字-static 篇六：c++关键字-new 篇七：c++关键字-volatile 篇八：c++关键字-union定义volatile 变量是随时可能发生...        ","id":"54668321","picUrl":"","postdate":"2017-01-22 14:28","tagList":["volatile"],"title":"c++关键字-volatile","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":48},{"commentTimes":1,"description":"本系列将对一些常见c++关键字做一个总结，共包括一下部分： 篇一：c++关键字-const 篇二：c++关键字-extern 篇三：c++关键字-operator 篇四：c++关键字-sizeof 篇五：c++关键字-static 篇六：c++关键字-new 篇七：c++关键字-volatile 篇八：c++关键字-union什么是联合“联合”是一种特殊的类，也是一种构造类型的数据结...        ","id":"54668327","picUrl":"http://img.blog.csdn.net/20170209155412014?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveWl4aWFuZmVuZzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast","postdate":"2017-01-22 14:27","tagList":["union"],"title":"c++关键字-union","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":70},{"commentTimes":0,"description":"稀疏矩阵是指矩阵中的元素大部分是0的矩阵，事实上，实际问题中大规模矩阵基本上都是稀疏矩阵，很多稀疏度在90%甚至99%以上。因此我们需要有高效的稀疏矩阵存储格式。本文总结几种典型的格式：COO,CSR,DIA,ELL,HYB。...        ","id":"54093701","picUrl":"http://img1.tuicool.com/InUVfy.png!web","postdate":"2017-01-05 15:33","tagList":["稀疏矩阵","存储"],"title":"稀疏矩阵存储格式总结","typeList":[{"count":6,"id":"6456349","name":"数据挖掘"}],"viewTimes":195},{"commentTimes":0,"description":"一、函数重载1、特征：1）相同的范围（在同一个类中）； 2）函数名字相同； 3）参数不同；  4）有无virtual关键字不影响。2、调用调用实参与形参符合的那个函数。二、函数覆盖覆盖是指派生类函数覆盖基类函数。1、特征：1）不同的范围（分别位于派生类与基类）； 2）函数名字相同； 3）参数相同； 4）基类函数必须有ovirtual 关键字，否则就是隐藏了。 2、调用1）当派生类对象派生...        ","id":"53697369","picUrl":"","postdate":"2016-12-16 19:36","tagList":["函数重载","函数覆盖","函数隐藏"],"title":"函数重载、覆盖与隐藏","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":84},{"commentTimes":0,"description":"一、定义哈希表(散列表)通过将关键码映射到表中的某个位置上来存储元素，然后根据关键码来访问元素。具体来说，就是在关键字 k 和元素的存储位置 p 之间建立一个对应关系 f ，使得 p=f(k) ， f 称为哈希函数 。创建哈希表时，把关键字为 k 的元素 直接存入地址为 f(k) 的单元 ；以后当查找关键字为 k 的元素时，再利用哈希函数计算出该元素的存储位置 p=f(k) ，从而达到按关键 字直接...        ","id":"53689303","picUrl":"","postdate":"2016-12-16 10:04","tagList":[],"title":"哈希表一","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":78},{"commentTimes":0,"description":"c++指针是一个难题，复杂指针更是一个难题，因此有必要分清指针数组与数组指针，函数指针与指针函数，并能准确识别他们，并进行灵活运用！...        ","id":"53689159","picUrl":"","postdate":"2016-12-16 09:57","tagList":[],"title":"c++复杂指针","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":90},{"commentTimes":0,"description":"平衡二叉搜索树AVL也许因为输入值不够随机，也许因为输入顺序的原因，还或许一些插入、删除操作，会使得二叉搜索树失去平衡，造成搜索效率低落的情况。    比如上面两个树，在平衡树上寻找15就只要2次查找，在非平衡树上却要5次查找方能找到，效率明显下降。那么什么叫“平衡”，直观上的最佳平衡条件就是 每个节点的左右子树有着相同高度，但这确实太过苛刻。平衡二叉树AVL tree退而求其次，要求任何节...        ","id":"53229734","picUrl":"http://img.blog.csdn.net/20161013012445567","postdate":"2016-11-19 14:06","tagList":[],"title":"二叉树-详解平衡二叉排序树AVL","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":299},{"commentTimes":0,"description":"一、什么是递归递归算法，就是直接或间接调用自身的函数，也就是把一个大的复杂的问题层层转换为一个小的和原问题相似的问题来求解的这样一种策略。上面解释可能有点太官方了，来看看知乎上大神的通俗易懂的解释：解释一“古之欲明明德于天下者，先治其国；欲治其国者，先齐其家；欲齐其家者，先修其身；欲修其身者，先正其心；欲正其心者，先诚其意；欲诚其意者，先致其知，致知在格物。物格而后知至，知至而后意诚，意诚而后心正，...        ","id":"53106380","picUrl":"http://i.imgur.com/jPVMzPE.jpg","postdate":"2016-11-09 21:37","tagList":["递归原理及常见应用"],"title":"递归原理及常见应用","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":90},{"commentTimes":2,"description":"需要代理IP的，拿过去直接可以用。如果这个觉得这个代理网站的ip太少，可以自行添加子类实现相应方法即可...        ","id":"53045704","picUrl":"","postdate":"2016-11-05 15:40","tagList":["获取代理IP","python获取代理"],"title":"python3获取免费代理IP","typeList":[{"count":2,"id":"6505361","name":"python"}],"viewTimes":773},{"commentTimes":0,"description":"const 这个关键字还是比较重要的，需要掌握...        ","id":"53027805","picUrl":"","postdate":"2016-11-04 09:16","tagList":["c++-const","const"],"title":"C++关键字—Const","typeList":[{"count":33,"id":"5618607","name":"c++"}],"viewTimes":1341},{"commentTimes":0,"description":"当集群搭建好了,接下来就是将自己的代码写好，扔到集群上进行跑了。安装软件1、JDK  2、Intellj IDEA  3、xshell这三部安装过程这里不介绍，下一步下一步即可。4、Intellj IDEA 安装scala插件 首次使用会出现安装插件提示，如果没安装，就在File-&gt;setting-&gt;plugins,输入scala.所需包各种包最好保持与集群版本一致。1、java sdk...        ","id":"53001642","picUrl":"http://img.blog.csdn.net/20161101205653312","postdate":"2016-11-01 22:03","tagList":["IDEA开发spar","spark","idea"],"title":"Windows下用IDEA进行Spark开发","typeList":[{"count":6,"id":"6456349","name":"数据挖掘"}],"viewTimes":1189},{"commentTimes":0,"description":"1、Spark是什么   Spark是基于内存计算的大数据并行计算框架，是一个用来实现快速而通用的集群计算平台。它替代了广泛使用的MapReduce计算模型，并且支持交互式查询和流处理等其他高效计算模型。2、Spark与Hadoop的关系Spark是一个计算框架,它只是MapReduce的替代方案；而Hadoop是一个生态系统，包含计算框架MapReduce和分布式文件系统HDFS，还有Hba...        ","id":"53000144","picUrl":"http://img.blog.csdn.net/20161101220905448","postdate":"2016-11-01 20:30","tagList":["spark简介"],"title":"大数据—Spark简介","typeList":[{"count":6,"id":"6456349","name":"数据挖掘"}],"viewTimes":1155},{"commentTimes":0,"description":"链表作为数据结构主要组成部分之一，在面试中也是主要考点，花了几点时间把LeetCode上的链表的题做了一下，发现还是有规律可循的，特此总结下！...        ","id":"52955264","picUrl":"","postdate":"2016-10-30 13:01","tagList":["链表算法题总结","翻转链表"],"title":"数据结构-链表篇","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":1350},{"commentTimes":0,"description":"1、插入排序1.1、 算法原理插入排序的基本方法是：每步将一个待排序序列按数据大小插到前面已经排序的序列中的适当位置，直到全部数据插入完毕为止。  假设有一组无序序列 R0, R1, … , Rn−1：  1、 将这个序列的第一个元素R0视为一个有序序列；  2、 依次把 R1, R2, … , Rn−1 插入到这个有序序列中；  3、 将Ri插入到有序序列中时，前 i-1 个数是有序的，将...        ","id":"52812211","picUrl":"http://i.imgur.com/Xkcyheg.jpg","postdate":"2016-10-14 01:30","tagList":["常见排序算法原理","常见排序算法实现"],"title":"图文并茂，再次温顾七大排序算法","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":1651},{"commentTimes":3,"description":"一、二叉搜索树首先二叉排序树也是一棵二叉树，所谓二叉树，就是“任何节点最多只允许两个子节点”，这两个子节点称为左右子节点。如下便是一个二叉树。   1.1、二叉排序树性质：1、就是若它的左子树不空，则左子树上所有节点的值均小于它的根节点的值； 2、若它的右子树不空，则右子树上所有节点的值均大于其根节点的值。 3、换句话说就是：任何节点的键值一定大于其左子树中的每一个节点的键值，并小于其右子...        ","id":"52802855","picUrl":"http://img.blog.csdn.net/20161012223249365","postdate":"2016-10-14 01:06","tagList":["二叉搜索树","平衡二叉搜索树"],"title":"二叉树-详解二叉排序树","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":4792},{"commentTimes":2,"description":"Hadoop主要包含如下核心组件：1. HDFS。它是hadoop使用的分布式文件系统，提供了hadoop运算过程中的数据存储、数据备份、数据错误校验等功能。  2. MapReduce。 它是hadoop的并行计算框架。基于它写出来的应用程序能够运行在由上千个商用机器组成的大型集群上，并以一种可靠容错的方式并行处理上TB级别的数据集。3. HBSE。HBse是建立在Hadoop HDFS之上的可靠的...        ","id":"52786105","picUrl":"http://i.imgur.com/sdUyl7w.jpg","postdate":"2016-10-11 11:26","tagList":[],"title":"大数据——初识Hadoop","typeList":[{"count":6,"id":"6456349","name":"数据挖掘"}],"viewTimes":2909},{"commentTimes":1,"description":"大学四年都没有参加过数学建模比赛，对于我这种天不怕地不怕，扛起火枪就死命往前冲的人来说，没有去感受一下那种被虐的体无完肤的感觉，实在是一种遗憾。终于在研究生期间，让我逮着了机会。前段时间一个数学院的女生向我请教C++问题，然后我顶着机院的光环，强行装了一把逼，瞬间树立了大神形象。这不，数学建模开始了，她和一个物理院的同学（后来发现是大神）就邀请我参加。那还有啥说的，对于我这种不要Face的人，那肯定...        ","id":"52650505","picUrl":"","postdate":"2016-09-24 14:39","tagList":["华为杯研究生数学建模","16数学建模基因变异","研究生数学建模B题"],"title":"数学建模，我也总算是参加过的人了","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":2064},{"commentTimes":2,"description":"MySql安装（win7)任何东西都是“会者不难，难者不会”。即便是MySQL，迈出第一步也是不容易的。以前都用Sql Server,然后每次都要经历重装一次系统方能将其卸载干净的痛苦。虽然，作为微软忠实用户，我也实在受不了这个，那就用Mysql吧。简简单单的东西，我还是折腾了一下午才装好，这里我主要记录一下我遇到的问题，免得下次安装忘了，如果其他人也遇到类似问题，或许有帮助。...        ","id":"52649918","picUrl":"http://img.blog.csdn.net/20160924114301600","postdate":"2016-09-24 12:56","tagList":["mysql无法登陆","mysql安装"],"title":"九九八十一难之MySQL安装","typeList":[],"viewTimes":1114},{"commentTimes":0,"description":"一、BMP文件由文件头、位图信息头、颜色信息和图形数据四部分组成。1、BMP文件头（14字节）[cpp]&#160;view plain&#160;copy&#160;typedef&#160;struct&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/****&#160;BMP&#160;file&#160;header&#160;structure&#160;****/&#160;&#160;{&#160;&#160;&#160;&#160;&#160;&#160;unsigned&#160;int...        ","id":"52591585","picUrl":"","postdate":"2016-09-20 04:31","tagList":["RGB TO BMP","RGB数据保存为BMP图片"],"title":"RGB数据保存为BMP图片","typeList":[{"count":2,"id":"6416214","name":"视频会议系统"}],"viewTimes":1798},{"commentTimes":0,"description":"原链接：http://cn.mathworks.com/help/matlab/import_export/write-to-delimited-data-files.html#br2ypq2-1方法一：用fprint输出元胞数组这个例子展示了怎么用fprint方法将元胞数组输出到TEXT 文件中。创建一个元胞数组例子, 以便输出C = {&#39;Atkins...        ","id":"52591408","picUrl":"","postdate":"2016-09-20 04:01","tagList":["matlab元胞数组输出到txt或者da"],"title":"Matlab将元胞数组输出到txt或者dat文件中","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":2961},{"commentTimes":0,"description":"1、1*1屏幕：3、2*2屏幕：3、3*3屏幕：4、4*4屏幕：布局可以按照自己个性岁意思设计，你可以设计成1*2,1*5或者其他你喜欢的样式.系统页面开发用的是QT,这个多分屏主要数据类型有两个VideoFerame,MeetingPlaceWidget,这是我简化后，保留的两个主要数据类型，通过整两个类就可以实现如上面的效果，但是在实际运用中...        ","id":"52527510","picUrl":"","postdate":"2016-09-13 17:48","tagList":["多分屏","视屏会议多分屏"],"title":"视频会议系统——多分屏","typeList":[{"count":2,"id":"6416214","name":"视频会议系统"}],"viewTimes":1717},{"commentTimes":0,"description":"网上大多数关于YUV420的资料都是关于YUV420P的，很少有YUV420SP的，因为YUV420SP的UV是交错存放的，处理起来相对麻烦点，但是YUV420SP也是一种常见格式，因此，在这里，我将关于YUV420SP格式数据的处理总结下，方便有需要的同志。一、YUV420格式数据介绍YUV,分为三个分量，“Y”表示明亮度，也就是灰度值；“U&quot;和”V&quot;表示的则是色度，作用是描述影...        ","id":"52181578","picUrl":"","postdate":"2016-08-11 14:52","tagList":["YUV420 TO RGB","RGB TO JPG","YUV420sp to JPG","YUV420sp to YUV420P","YUV420P TO YUV420sp"],"title":"YUV420存储为BMP和JPG图片","typeList":[{"count":2,"id":"6319854","name":"开源库"}],"viewTimes":3035},{"commentTimes":0,"description":"在QT中，QPushButton是我们经常用的控件，但是系统默认控件的样式不好看，因此我们一般都会给QPushButton设置背景图片，并且一般想达到的效果是，当鼠标放上去时是一张图片，当鼠标点击时是一张图片，当鼠标离开时，又是另外一张图片，怎么实现这个效果了。1、setStyleSheetsetStyleSheet(&quot;QPushButton{background-image: u...        ","id":"52166703","picUrl":"","postdate":"2016-08-09 22:57","tagList":["QPushButton设置背景图片变化"],"title":"QPushButton设置背景图片变换（素材四连图）","typeList":[{"count":2,"id":"5734119","name":"QT"}],"viewTimes":1931},{"commentTimes":0,"description":"简单总结了下在windows系统下，如何判断进程是否在运行，以及如何打开指定exe进程，以及如何停止指定进程。...        ","id":"52161322","picUrl":"","postdate":"2016-08-09 13:14","tagList":["windows下c++打开指定exe进程","windows下c++关闭指定进程","windows判断进程是否在运行"],"title":"Windows下对进程的一些操作","typeList":[{"count":2,"id":"6324100","name":"Windows"}],"viewTimes":1525},{"commentTimes":1,"description":"一、获取设备音量/** * @brief GetAudioOutputVolumn用于获取设备输出音量 * @remark 不指定设备可能导致获取的音量为0 */int DeviceManager::GetAudioOutputVolumn( const std::string &amp;deviceName ){    //对于DirectSound设备，获取其对应波形设备音量...        ","id":"51984685","picUrl":"","postdate":"2016-07-22 01:09","tagList":["windows下获取设备音量","windows下设置设备音量","获取与设置windows下音频设备的音量","windows下获取与设置音频设备音量"],"title":"获取与设置windows系统下音频设备音量","typeList":[{"count":33,"id":"5618607","name":"c++"},{"count":2,"id":"6324100","name":"Windows"}],"viewTimes":2585},{"commentTimes":0,"description":"二、编译libjpeg-turbo：1、&#160; 从https://sourceforge.net/projects/libjpeg-turbo/下载libjpeg-turbo最新源代码，将其保存到E:\\Desktop\\libjpeg-turbo-master文件夹下；2、&#160; 从http://www.cmake.org/下载最新版的CMake，并安装；3、&#160; 在E:\\Deskto...        ","id":"51955695","picUrl":"","postdate":"2016-07-19 18:57","tagList":["libjpeg编译","libjpeg-turbo编译","libjpeg.lib"],"title":"windows下编译 libjpeg以及libjpeg-turbo","typeList":[{"count":2,"id":"6319854","name":"开源库"}],"viewTimes":1791},{"commentTimes":0,"description":"基础知识1.&#160;分治法的思想：将原问题分解为几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解。2.&#160;满足分治策略的条件：1)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;该问题缩小到一定规模就可以解决；2)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;该问题可以分解为若干个规模较小的相同的问题，即该问题具有最优子结构；3)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;利用该问题分解出的子问题可以合并为该问题的解；...        ","id":"51000470","picUrl":"","postdate":"2016-03-28 21:00","tagList":["分治策略","归并排序","快速排序","最大子数组","寻找逆序对数"],"title":"常用算法-分治法","typeList":[{"count":23,"id":"5829745","name":"数据结构"}],"viewTimes":1515},{"commentTimes":0,"description":"一。互斥量和条件变量简介&#160; &#160; &#160; &#160;互斥量(mutex)从本质上说是一把锁，在访问共享资源前对互斥量进行加锁，在访问完成后释放互斥量上的锁。对互斥量进行加锁以后，任何其他试图再次对互斥锁加锁的线程将会阻塞直到当前线程释放该互斥锁。如果释放互斥锁时有多个线程阻塞，所有在该互斥锁上的阻塞线程都会变成可运行状态，第一个变为运行状态的线程可以对互斥锁加锁，其他线程将会看到互斥锁依然被锁住...        ","id":"50458041","picUrl":"","postdate":"2016-01-04 19:51","tagList":[],"title":"unix同步——条件变量","typeList":[],"viewTimes":1360},{"commentTimes":0,"description":"信号概念&#160;&#160;&#160;&#160;信号是软件终端，它提供了一种异步处理事件的方法。每个信号都有一个名字，这些名字都是以三个字符SIG开头。产生终端信号的条件：1.&#160;当用户按某些终端键时，产生信号。2.&#160;硬件异常产生信号：除数为0、无效的存储访问等等。3.&#160;进程用kill函数可将信号发送给另一个进程或进程组用户可用kill命令将信号发送给其他进程。4.&#160;当检测到某种软件条件已经发生，并将其通知...        ","id":"50445827","picUrl":"","postdate":"2016-01-01 20:50","tagList":[],"title":"UNIX环境高级编程——信号","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":1277},{"commentTimes":0,"description":"进程关系Unix终端登录过程：&#160;&#160;&#160;&#160;init-----&gt;init----&gt;getty-----&gt;login-----&gt;getpwname-----&gt;getpasw-----&gt;crypt-----&gt;登录成功&#160;&#160;&#160;&#160;系统管理员创建通常名为/etc/ttys的文件，文件中每个终端设备都有一行用来说明设备名和传递给getty程序的参数如终端的波特率等等&gt;&#160;&#160;&#160;&#160;1.当系统自举时，内核创建...        ","id":"50445239","picUrl":"","postdate":"2016-01-01 16:32","tagList":[],"title":"UNIX环境高级编程——进程（三）","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":726},{"commentTimes":0,"description":"进程控制进程标示符每个进程都有一个非负整数表示的唯一ID。虽然是唯一的，但是进程ID可以重用。当一个进程终止后，其进程ID就可以再次使用了。ID为0的通常是调度进程，常被称为交换进程，也被称为系统进程；ID为1的通常是init进程；ID为2的通常是页守护进程。#include #include pid_t getpid(void); return PIDpid_t getpp...        ","id":"50443785","picUrl":"","postdate":"2015-12-31 21:32","tagList":[],"title":"UNIX环境高级编程——进程（二）","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":770},{"commentTimes":0,"description":"进程环境1.&#160;Main函数&#160; &#160; C程序总是从main函数开始执行，main函数原型为&#160;int&#160;main(int&#160;argc,char&#160;*argv[]);&#160;其中，argc是命令行参数的数目，argv是指向参数的各个指针所构成的数组。当内核执行一个C程序时（使用exec函数），在调用main前先调用一个特殊的启动例程，可执行文件将此启动例程指定为程序的起始地址。启动例程从内核取得命令行参数...        ","id":"50440512","picUrl":"","postdate":"2015-12-31 11:27","tagList":[],"title":"UNIX环境高级编程——进程（一）","typeList":[{"count":24,"id":"6006179","name":"Linux/Unix"}],"viewTimes":836}]